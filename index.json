[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":["Basic"],"contents":"Why are we doing this? Standing out in the job market nowadays requires higher visibility and Github offers free personal websites for your user profile and any Github repos with Github Pages.\nA personal website can offer:\nA useful tool for networking and building professional connections. By having a personal website, you can make it easier for others to find and contact you, and you can use it as a platform to promote your professional skills and experiences. A great way to share information about yourself and your interests with others. You can use it to showcase your work, share your thoughts and ideas, and connect with others who share your interests. Additionally, a good way to boost your online presence and improve your search engine rankings. By regularly updating your website with relevant and engaging content, you can help increase your visibility online and improve your chances of being found by potential employers or clients. In addition, you\u0026rsquo;ll be practicing coveted technical skills including:\nGit source control Markdown creation/modification Static Site generation using hugo What will the site have? When we\u0026rsquo;re done, you\u0026rsquo;ll have a personal website similar to my site complete with:\nToggleable sections including An About you Skills Projects Experience Achievements Accomplishments Publications A full blog for posts A custom avatar (from getavataaars.com) A way for people to download your resume directly from your site Automatic deployments on update Free hosting on Github Pages Prerequisites A Github account git \u0026amp; hugo installed on your computer A pdf copy of your resume (I recommend myperfectresume.com if you don\u0026rsquo;t have a resume or need to update it) A text editor (something like VS Code is preferred but not necessary) Make sure you have these Prerequisites completed before the date of the workshop!\n","date":"December 12, 2022","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/posts/workshops/github-pages-site/github-pages-site/","summary":"Why are we doing this? Standing out in the job market nowadays requires higher visibility and Github offers free personal websites for your user profile and any Github repos with Github Pages.\nA personal website can offer:\nA useful tool for networking and building professional connections. By having a personal website, you can make it easier for others to find and contact you, and you can use it as a platform to promote your professional skills and experiences.","tags":["Workshops","Github Pages","Hugo"],"title":"Create Your Own Personal Site with Github Pages \u0026 Hugo"},{"categories":["Basic"],"contents":" Create a Github account Create and Upload an SSH Key to Github Install git Install hugo (Optional) Install VS Code editor ","date":"December 12, 2022","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/posts/workshops/github-pages-site/prework/","summary":" Create a Github account Create and Upload an SSH Key to Github Install git Install hugo (Optional) Install VS Code editor ","tags":["Workshops","Github Pages","Hugo"],"title":"Prework"},{"categories":["Basic"],"contents":"To generate an SSH key and upload it to GitHub, follow these steps:\nOpen a terminal on your computer and run the following command: ssh-keygen -t ed25519 -b 512 When prompted, enter a file in which to save the key. You can press Enter to accept the default file location. Next, you will be asked to enter a passphrase for the key. This is an optional security measure that adds an extra layer of protection to your key. If you choose to set a passphrase, you will be required to enter it every time you use the key. After the key has been generated, run the following command to print the key to your terminal: cat ~/.ssh/id_ed25519.pub This will print the key to your terminal. You can now copy the key by highlighting it with your mouse and pressing Ctrl+C (or Cmd+C on macOS). In your web browser, go to the GitHub website and log in to your account. Click on your profile picture in the top right corner of the page and select Settings from the drop-down menu. In the Settings menu, navigate to the SSH and GPG keys section and click on the New SSH key button. In the \u0026ldquo;Title\u0026rdquo; field, enter a name for the key that will help you identify it later (for example, \u0026ldquo;My laptop\u0026rdquo;). Paste the key that you copied in step 5 into the \u0026ldquo;Key\u0026rdquo; field. Click on the Add SSH key button to save the key to your GitHub account. You should now be able to use the key to authenticate with GitHub. For more information on using SSH keys with GitHub, you can refer to GitHub\u0026rsquo;s documentation.\n","date":"December 12, 2022","hero":"/images/default-hero.jpg","permalink":"https://darrelltang.github.io/posts/github-ssh/create-and-upload-ssh-key-to-github/","summary":"To generate an SSH key and upload it to GitHub, follow these steps:\nOpen a terminal on your computer and run the following command: ssh-keygen -t ed25519 -b 512 When prompted, enter a file in which to save the key. You can press Enter to accept the default file location. Next, you will be asked to enter a passphrase for the key. This is an optional security measure that adds an extra layer of protection to your key.","tags":["SSH","Github"],"title":"Create and Upload an SSH Key to Github"}]